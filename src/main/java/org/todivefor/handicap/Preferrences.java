/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.todivefor.handicap;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author peterream
 */
public class Preferrences extends javax.swing.JPanel
{
    public static JFileChooser fc;

    /**
     * Creates new form Preferences
     */
    public Preferrences()
    {
        initComponents();
        
/*
 * 		End of GUI setup
 */

/*
* 	Load themes for "metal"
 */
        comboBoxPreferencesTheme.addItem("DefaultMetal");			// Ocean or DefaultMetal if Metal
        comboBoxPreferencesTheme.addItem("Ocean");

        String lAndF = HandicapMain.handicapPrefs.get(HandicapMain.
                HANDICAPTHEME, HandicapMain.NOTH);                      // Them from prefs
        if (!lAndF.equals(HandicapMain.NOLF))                           // Any theme there
                comboBoxPreferencesTheme.setSelectedItem(lAndF);        // Yes, display in combobox
		
/*
 * 		Load L&F 	
 */
//		comboBoxPreferencesLookAndFeel.addItem("Metal");			// "Metal", "System", "Motif", Windows
//		comboBoxPreferencesLookAndFeel.addItem("System");
//		comboBoxPreferencesLookAndFeel.addItem("Motif");
//		if (!(HandicapMain.operatingSystem.startsWith("Win") || HandicapMain.operatingSystem.startsWith("Mac")))
//			comboBoxPreferencesLookAndFeel.addItem("GTK");                  // Not Windows or Mac
//		if (HandicapMain.operatingSystem.startsWith("Win"))		
//				comboBoxPreferencesLookAndFeel.addItem("Windows");      // Windows only
//		comboBoxPreferencesLookAndFeel.addItem("Nimbus");

//      Get look and feel names in JDK and add to L&F combobox

        UIManager.LookAndFeelInfo[] looks = UIManager.getInstalledLookAndFeels();
        for (UIManager.LookAndFeelInfo look : looks)
        {
            if (HandicapMain.debug)
                System.out.println(look.getName() + ":  " + look.getClassName());
            comboBoxPreferencesLookAndFeel.addItem(look.getName());                     // Add look & feel name
        }
		
        lAndF = HandicapMain.handicapPrefs.get(HandicapMain.HANDICAPLOOKANDFEEL, HandicapMain.NOLF);	// Look and feel from prefs
        if (!lAndF.equals(HandicapMain.NOLF))								// Anything set?
        {
            comboBoxPreferencesLookAndFeel.setSelectedItem(lAndF);		// Yes, show it in combobox
            if (!lAndF.equals("Metal"))					// Meta?
            {
                comboBoxPreferencesTheme.setVisible(false);		// No, make theme box invisible
                lblPreferencesTheme.setVisible(false);
                HandicapMain.handicapPrefs.remove(HandicapMain.HANDICAPTHEME);	// Delete any theme from prefs
            }
        }
        HandicapMain.fillingLookAndFeelComboBox = false;			// Done filling
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        panelCenter = new javax.swing.JPanel();
        //Create a file chooser
        fc = new JFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter1 = new FileNameExtensionFilter("sqlite DB", "sqlite");
        fc.addChoosableFileFilter(filter1);

        //Uncomment one of the following lines to try a different
        //file selection mode.  The first allows just directories
        //to be selected (and, at least in the Java look and feel,
            //shown).  The second allows both files and directories
        //to be selected.  If you leave these lines commented out,
        //then the default mode (FILES_ONLY) will be used.
        //
        //        Default is file only
        //        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        lblLookAndFeel = new javax.swing.JLabel();
        comboBoxPreferencesLookAndFeel = new javax.swing.JComboBox<>();
        lblPreferencesTheme = new javax.swing.JLabel();
        comboBoxPreferencesTheme = new javax.swing.JComboBox<>();
        btnPreferencesDebug = new javax.swing.JButton();
        panelSouth = new javax.swing.JPanel();
        btnPreferrencesExit = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        panelCenter.setLayout(new java.awt.GridBagLayout());

        lblLookAndFeel.setText("Look and Feel");
        panelCenter.add(lblLookAndFeel, new java.awt.GridBagConstraints());

        comboBoxPreferencesLookAndFeel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{} ));
        comboBoxPreferencesLookAndFeel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                comboBoxPreferencesLookAndFeelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 19, 0, 19);
        panelCenter.add(comboBoxPreferencesLookAndFeel, gridBagConstraints);

        lblPreferencesTheme.setText("Theme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(13, 13, 13, 13);
        panelCenter.add(lblPreferencesTheme, gridBagConstraints);

        comboBoxPreferencesTheme.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{} ));
        comboBoxPreferencesTheme.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                comboBoxPreferencesThemeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        panelCenter.add(comboBoxPreferencesTheme, gridBagConstraints);

        btnPreferencesDebug.setText("Debug");
        btnPreferencesDebug.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPreferencesDebugActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelCenter.add(btnPreferencesDebug, gridBagConstraints);

        add(panelCenter, java.awt.BorderLayout.CENTER);

        btnPreferrencesExit.setText("Back");
        btnPreferrencesExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPreferrencesExitActionPerformed(evt);
            }
        });
        panelSouth.add(btnPreferrencesExit);

        add(panelSouth, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    
    private void comboBoxPreferencesLookAndFeelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comboBoxPreferencesLookAndFeelActionPerformed
    {//GEN-HEADEREND:event_comboBoxPreferencesLookAndFeelActionPerformed
        if (!HandicapMain.fillingLookAndFeelComboBox)               // Are we filling L & F combobox?
        {
            HandicapMain.lookAndFeel = 
                    (String) (comboBoxPreferencesLookAndFeel.
                    getSelectedItem());                             // No
            if (HandicapMain.lookAndFeel.equals("Metal"))           // Is this metal?
            {
                lblPreferencesTheme.setVisible(true);               // Metal, so set themes label visible in Prefs
                comboBoxPreferencesTheme.setVisible(true);          // Set themes combobox visible
            } 
            else                                                    // Not metal
            {
                lblPreferencesTheme.setVisible(false);              // Set themes label invisible in Prefs
                comboBoxPreferencesTheme.setVisible(false);         // Set themes combobox not visible
                HandicapMain.initLookAndFeel(HandicapMain.
                        lookAndFeel, HandicapMain.THEME);           // No theme, so go
            }
            System.out.println(HandicapMain.handicapPrefs);
            HandicapMain.handicapPrefs.put(HandicapMain.HANDICAPLOOKANDFEEL, HandicapMain.lookAndFeel); // Set L & F in Prefs
            System.out.println(HandicapMain.handicapPrefs);
            SwingUtilities.updateComponentTreeUI(getParent());      // Update all components of frame
            DisplayScores.scoreDataChanged = true;                  // Re-due display scores
            if (HandicapMain.lastCard.equals(HandicapMain.MAINTAINCOURSES))     // Are we changing L&F from course display?
                MaintainCourses.refreshCourseTable(SQLiteConnection.connection,
                        HandicapMain.courseTableName);      // Yes, refresh course table
            if (HandicapMain.lastCard.equals(HandicapMain.DISPLAYSCORES))       // Are we changing L&F from score display?
                DisplayScores.refreshScoreTable(HandicapMain.scoreTableName);   // Refresh scores table
        }
        try
        {
            HandicapMain.handicapPrefs.flush();                     // Make all preference changes permanent
        }
        catch (BackingStoreException ex)
        {
            Logger.getLogger(Preferrences.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxPreferencesLookAndFeelActionPerformed

    private void comboBoxPreferencesThemeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comboBoxPreferencesThemeActionPerformed
    {//GEN-HEADEREND:event_comboBoxPreferencesThemeActionPerformed
        if (!HandicapMain.fillingLookAndFeelComboBox)                               // Filling L & F combobox
        {
            String theme = (String) (comboBoxPreferencesTheme.getSelectedItem());   // No, get theme selection
            HandicapMain.handicapPrefs.put(HandicapMain.HANDICAPTHEME, theme);      // Save in preferences
            try
            {
                HandicapMain.handicapPrefs.flush();                                 // Make all preference changes permanent
            }
            catch (BackingStoreException ex)
            {
                Logger.getLogger(Preferrences.class.getName()).log(Level.SEVERE, null, ex);
            }
            HandicapMain.initLookAndFeel(HandicapMain.lookAndFeel, theme);      // Set theme
            SwingUtilities.updateComponentTreeUI(getParent());			// Update all components of frame
	}
    }//GEN-LAST:event_comboBoxPreferencesThemeActionPerformed

    private void btnPreferrencesExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPreferrencesExitActionPerformed
    {//GEN-HEADEREND:event_btnPreferrencesExitActionPerformed
//        HandicapMain.cards.show(getParent(), HandicapMain.whereToReturn); // Return to where came from
        if (HandicapMain.returnStack.empty())                               // Is returnStack empty
        {
           HandicapMain.returnStack.push(HandicapMain.MAINMENU);            // Yes, force return to MAINMENU            
        }
        HandicapMain.resetTitle();                                          // Reset frame title
        HandicapMain.cards.show(getParent(), 
                (String) HandicapMain.returnStack.pop());                   // Return to where came from
    }//GEN-LAST:event_btnPreferrencesExitActionPerformed

    private void btnPreferencesDebugActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPreferencesDebugActionPerformed
    {//GEN-HEADEREND:event_btnPreferencesDebugActionPerformed
   
/*
 * 					Toggle debug						
 */
        if (HandicapMain.debug)                                                         // Debug on
        {
            HandicapMain.debug = false;                                                 // Yes, turn off
            HandicapMain.mnDebug.setVisible(false); 					// Turn off debug menu
            HandicapMain.handicapPrefs.putBoolean(HandicapMain.HANDICAPDEBUG, false); 	// Set debug off
        } 
        else                                                                            // No
        {
            HandicapMain.debug = true;                                                  // Turn off
            HandicapMain.mnDebug.setVisible(true);					// Turn debug menu
            HandicapMain.handicapPrefs.putBoolean(HandicapMain.HANDICAPDEBUG, true);	// Set debug on
        }
        try
        {
            HandicapMain.handicapPrefs.flush();             // Make all preference changes permanent
        }
        catch (BackingStoreException ex)
        {
            Logger.getLogger(Preferrences.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPreferencesDebugActionPerformed

/*
 *  Beginning of common methods within Preferrences class
 */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPreferencesDebug;
    private javax.swing.JButton btnPreferrencesExit;
    private javax.swing.JComboBox<String> comboBoxPreferencesLookAndFeel;
    private javax.swing.JComboBox<String> comboBoxPreferencesTheme;
    private javax.swing.JLabel lblLookAndFeel;
    private javax.swing.JLabel lblPreferencesTheme;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelSouth;
    // End of variables declaration//GEN-END:variables
}
